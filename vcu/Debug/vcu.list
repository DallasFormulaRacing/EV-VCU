
vcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000250c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c4  080026c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026c4  080026c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c4  080026c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000009c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008a96  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000182c  00000000  00000000  00028b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000850  00000000  00000000  0002a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000064b  00000000  00000000  0002ab98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000199dc  00000000  00000000  0002b1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b0c7  00000000  00000000  00044bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00095e3e  00000000  00000000  0004fc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002174  00000000  00000000  000e5ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000e7c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800267c 	.word	0x0800267c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800267c 	.word	0x0800267c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa00 	bl	80005d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f807 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8cc 	bl	8000370 <MX_GPIO_Init>
  MX_CAN_Init();
 80001d8:	f000 f856 	bl	8000288 <MX_CAN_Init>
  MX_I2C1_Init();
 80001dc:	f000 f888 	bl	80002f0 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x18>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b096      	sub	sp, #88	; 0x58
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f002 fa17 	bl	8002624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	f107 031c 	add.w	r3, r7, #28
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
 8000214:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800022a:	4618      	mov	r0, r3
 800022c:	f000 feb0 	bl	8000f90 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000236:	f000 f8b3 	bl	80003a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	f107 031c 	add.w	r3, r7, #28
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f001 fed9 	bl	800200c <HAL_RCC_ClockConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000260:	f000 f89e 	bl	80003a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000264:	2320      	movs	r3, #32
 8000266:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4618      	mov	r0, r3
 8000270:	f002 f8b2 	bl	80023d8 <HAL_RCCEx_PeriphCLKConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800027a:	f000 f891 	bl	80003a0 <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3758      	adds	r7, #88	; 0x58
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800028c:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <MX_CAN_Init+0x60>)
 800028e:	4a17      	ldr	r2, [pc, #92]	; (80002ec <MX_CAN_Init+0x64>)
 8000290:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <MX_CAN_Init+0x60>)
 8000294:	2210      	movs	r2, #16
 8000296:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <MX_CAN_Init+0x60>)
 800029a:	2200      	movs	r2, #0
 800029c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <MX_CAN_Init+0x60>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_CAN_Init+0x60>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_CAN_Init+0x60>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <MX_CAN_Init+0x60>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002b6:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_CAN_Init+0x60>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <MX_CAN_Init+0x60>)
 80002be:	2200      	movs	r2, #0
 80002c0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_CAN_Init+0x60>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <MX_CAN_Init+0x60>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_CAN_Init+0x60>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <MX_CAN_Init+0x60>)
 80002d6:	f000 f9e1 	bl	800069c <HAL_CAN_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80002e0:	f000 f85e 	bl	80003a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40006400 	.word	0x40006400

080002f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_I2C1_Init+0x74>)
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <MX_I2C1_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_I2C1_Init+0x74>)
 80002fc:	4a1b      	ldr	r2, [pc, #108]	; (800036c <MX_I2C1_Init+0x7c>)
 80002fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_I2C1_Init+0x74>)
 8000308:	2201      	movs	r2, #1
 800030a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_I2C1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032a:	480e      	ldr	r0, [pc, #56]	; (8000364 <MX_I2C1_Init+0x74>)
 800032c:	f000 fd0a 	bl	8000d44 <HAL_I2C_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000336:	f000 f833 	bl	80003a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033a:	2100      	movs	r1, #0
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <MX_I2C1_Init+0x74>)
 800033e:	f000 fd90 	bl	8000e62 <HAL_I2CEx_ConfigAnalogFilter>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000348:	f000 f82a 	bl	80003a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800034c:	2100      	movs	r1, #0
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_I2C1_Init+0x74>)
 8000350:	f000 fdd2 	bl	8000ef8 <HAL_I2CEx_ConfigDigitalFilter>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800035a:	f000 f821 	bl	80003a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000050 	.word	0x20000050
 8000368:	40005400 	.word	0x40005400
 800036c:	2000090e 	.word	0x2000090e

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_GPIO_Init+0x2c>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a08      	ldr	r2, [pc, #32]	; (800039c <MX_GPIO_Init+0x2c>)
 800037c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_GPIO_Init+0x2c>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a4:	b672      	cpsid	i
}
 80003a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <Error_Handler+0x8>
	...

080003ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <HAL_MspInit+0x44>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <HAL_MspInit+0x44>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <HAL_MspInit+0x44>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <HAL_MspInit+0x44>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <HAL_MspInit+0x44>)
 80003d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d4:	61d3      	str	r3, [r2, #28]
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_MspInit+0x44>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000

080003f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a18      	ldr	r2, [pc, #96]	; (8000474 <HAL_CAN_MspInit+0x80>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d129      	bne.n	800046a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <HAL_CAN_MspInit+0x84>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a17      	ldr	r2, [pc, #92]	; (8000478 <HAL_CAN_MspInit+0x84>)
 800041c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <HAL_CAN_MspInit+0x84>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800042a:	613b      	str	r3, [r7, #16]
 800042c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_CAN_MspInit+0x84>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a11      	ldr	r2, [pc, #68]	; (8000478 <HAL_CAN_MspInit+0x84>)
 8000434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_CAN_MspInit+0x84>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000446:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800044a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044c:	2302      	movs	r3, #2
 800044e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000454:	2303      	movs	r3, #3
 8000456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000458:	2309      	movs	r3, #9
 800045a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	f107 0314 	add.w	r3, r7, #20
 8000460:	4619      	mov	r1, r3
 8000462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000466:	f000 fafb 	bl	8000a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800046a:	bf00      	nop
 800046c:	3728      	adds	r7, #40	; 0x28
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40006400 	.word	0x40006400
 8000478:	40021000 	.word	0x40021000

0800047c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a18      	ldr	r2, [pc, #96]	; (80004fc <HAL_I2C_MspInit+0x80>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d129      	bne.n	80004f2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <HAL_I2C_MspInit+0x84>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a17      	ldr	r2, [pc, #92]	; (8000500 <HAL_I2C_MspInit+0x84>)
 80004a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004a8:	6153      	str	r3, [r2, #20]
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <HAL_I2C_MspInit+0x84>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80004b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004bc:	2312      	movs	r3, #18
 80004be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c4:	2303      	movs	r3, #3
 80004c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004c8:	2304      	movs	r3, #4
 80004ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	4619      	mov	r1, r3
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d6:	f000 fac3 	bl	8000a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_I2C_MspInit+0x84>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a08      	ldr	r2, [pc, #32]	; (8000500 <HAL_I2C_MspInit+0x84>)
 80004e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <HAL_I2C_MspInit+0x84>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004f2:	bf00      	nop
 80004f4:	3728      	adds	r7, #40	; 0x28
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40005400 	.word	0x40005400
 8000500:	40021000 	.word	0x40021000

08000504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000508:	e7fe      	b.n	8000508 <NMI_Handler+0x4>

0800050a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <HardFault_Handler+0x4>

08000510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <MemManage_Handler+0x4>

08000516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <BusFault_Handler+0x4>

0800051c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <UsageFault_Handler+0x4>

08000522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000550:	f000 f884 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}

08000558 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <SystemInit+0x20>)
 800055e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000562:	4a05      	ldr	r2, [pc, #20]	; (8000578 <SystemInit+0x20>)
 8000564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800057c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f7ff ffea 	bl	8000558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000586:	490d      	ldr	r1, [pc, #52]	; (80005bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <LoopForever+0xe>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800059c:	4c0a      	ldr	r4, [pc, #40]	; (80005c8 <LoopForever+0x16>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f002 f843 	bl	8002634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ae:	f7ff fe0b 	bl	80001c8 <main>

080005b2 <LoopForever>:

LoopForever:
    b LoopForever
 80005b2:	e7fe      	b.n	80005b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005c0:	080026cc 	.word	0x080026cc
  ldr r2, =_sbss
 80005c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c8:	200000a8 	.word	0x200000a8

080005cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC1_2_IRQHandler>
	...

080005d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_Init+0x28>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <HAL_Init+0x28>)
 80005da:	f043 0310 	orr.w	r3, r3, #16
 80005de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 fa09 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e6:	200f      	movs	r0, #15
 80005e8:	f000 f808 	bl	80005fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005ec:	f7ff fede 	bl	80003ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40022000 	.word	0x40022000

080005fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_InitTick+0x54>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x58>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4619      	mov	r1, r3
 800060e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000612:	fbb3 f3f1 	udiv	r3, r3, r1
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fa13 	bl	8000a46 <HAL_SYSTICK_Config>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	e00e      	b.n	8000648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d80a      	bhi.n	8000646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f04f 30ff 	mov.w	r0, #4294967295
 8000638:	f000 f9e9 	bl	8000a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_InitTick+0x5c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
 8000644:	e000      	b.n	8000648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000000 	.word	0x20000000
 8000654:	20000008 	.word	0x20000008
 8000658:	20000004 	.word	0x20000004

0800065c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_IncTick+0x20>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_IncTick+0x24>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000008 	.word	0x20000008
 8000680:	200000a4 	.word	0x200000a4

08000684 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;  
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_GetTick+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200000a4 	.word	0x200000a4

0800069c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d101      	bne.n	80006ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e0ed      	b.n	800088a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff fe9a 	bl	80003f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f042 0201 	orr.w	r2, r2, #1
 80006ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006d0:	f7ff ffd8 	bl	8000684 <HAL_GetTick>
 80006d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006d6:	e012      	b.n	80006fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006d8:	f7ff ffd4 	bl	8000684 <HAL_GetTick>
 80006dc:	4602      	mov	r2, r0
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	2b0a      	cmp	r3, #10
 80006e4:	d90b      	bls.n	80006fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2205      	movs	r2, #5
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e0c5      	b.n	800088a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0e5      	beq.n	80006d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f022 0202 	bic.w	r2, r2, #2
 800071a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800071c:	f7ff ffb2 	bl	8000684 <HAL_GetTick>
 8000720:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000722:	e012      	b.n	800074a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000724:	f7ff ffae 	bl	8000684 <HAL_GetTick>
 8000728:	4602      	mov	r2, r0
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	2b0a      	cmp	r3, #10
 8000730:	d90b      	bls.n	800074a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2205      	movs	r2, #5
 8000742:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e09f      	b.n	800088a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	f003 0302 	and.w	r3, r3, #2
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1e5      	bne.n	8000724 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7e1b      	ldrb	r3, [r3, #24]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d108      	bne.n	8000772 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	e007      	b.n	8000782 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7e5b      	ldrb	r3, [r3, #25]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d108      	bne.n	800079c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	e007      	b.n	80007ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7e9b      	ldrb	r3, [r3, #26]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d108      	bne.n	80007c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0220 	orr.w	r2, r2, #32
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	e007      	b.n	80007d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f022 0220 	bic.w	r2, r2, #32
 80007d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7edb      	ldrb	r3, [r3, #27]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d108      	bne.n	80007f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f022 0210 	bic.w	r2, r2, #16
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	e007      	b.n	8000800 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f042 0210 	orr.w	r2, r2, #16
 80007fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7f1b      	ldrb	r3, [r3, #28]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d108      	bne.n	800081a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f042 0208 	orr.w	r2, r2, #8
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	e007      	b.n	800082a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f022 0208 	bic.w	r2, r2, #8
 8000828:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7f5b      	ldrb	r3, [r3, #29]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d108      	bne.n	8000844 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f042 0204 	orr.w	r2, r2, #4
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e007      	b.n	8000854 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 0204 	bic.w	r2, r2, #4
 8000852:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689a      	ldr	r2, [r3, #8]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	431a      	orrs	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	431a      	orrs	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	ea42 0103 	orr.w	r1, r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	430a      	orrs	r2, r1
 8000878:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	; (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c4:	d301      	bcc.n	80009ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00f      	b.n	80009ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <SysTick_Config+0x40>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d2:	210f      	movs	r1, #15
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f7ff ff8e 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SysTick_Config+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SysTick_Config+0x40>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff47 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a20:	f7ff ff5c 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f7ff ff8e 	bl	800094c <NVIC_EncodePriority>
 8000a30:	4602      	mov	r2, r0
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff5d 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffb0 	bl	80009b4 <SysTick_Config>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	e14e      	b.n	8000d0e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	2101      	movs	r1, #1
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 8140 	beq.w	8000d08 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d005      	beq.n	8000aa0 <HAL_GPIO_Init+0x40>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d130      	bne.n	8000b02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	2203      	movs	r2, #3
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68da      	ldr	r2, [r3, #12]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	f003 0201 	and.w	r2, r3, #1
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d017      	beq.n	8000b3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2203      	movs	r2, #3
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d123      	bne.n	8000b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	08da      	lsrs	r2, r3, #3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3208      	adds	r2, #8
 8000b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	220f      	movs	r2, #15
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	08da      	lsrs	r2, r3, #3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0203 	and.w	r2, r3, #3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 809a 	beq.w	8000d08 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd4:	4b55      	ldr	r3, [pc, #340]	; (8000d2c <HAL_GPIO_Init+0x2cc>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a54      	ldr	r2, [pc, #336]	; (8000d2c <HAL_GPIO_Init+0x2cc>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b52      	ldr	r3, [pc, #328]	; (8000d2c <HAL_GPIO_Init+0x2cc>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bec:	4a50      	ldr	r2, [pc, #320]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c16:	d013      	beq.n	8000c40 <HAL_GPIO_Init+0x1e0>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a46      	ldr	r2, [pc, #280]	; (8000d34 <HAL_GPIO_Init+0x2d4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d00d      	beq.n	8000c3c <HAL_GPIO_Init+0x1dc>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a45      	ldr	r2, [pc, #276]	; (8000d38 <HAL_GPIO_Init+0x2d8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x1d8>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a44      	ldr	r2, [pc, #272]	; (8000d3c <HAL_GPIO_Init+0x2dc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_GPIO_Init+0x1d4>
 8000c30:	2303      	movs	r3, #3
 8000c32:	e006      	b.n	8000c42 <HAL_GPIO_Init+0x1e2>
 8000c34:	2305      	movs	r3, #5
 8000c36:	e004      	b.n	8000c42 <HAL_GPIO_Init+0x1e2>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e002      	b.n	8000c42 <HAL_GPIO_Init+0x1e2>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <HAL_GPIO_Init+0x1e2>
 8000c40:	2300      	movs	r3, #0
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	f002 0203 	and.w	r2, r2, #3
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	4093      	lsls	r3, r2
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c52:	4937      	ldr	r1, [pc, #220]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3302      	adds	r3, #2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c60:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c84:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cae:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d02:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <HAL_GPIO_Init+0x2e0>)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	fa22 f303 	lsr.w	r3, r2, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f47f aea9 	bne.w	8000a70 <HAL_GPIO_Init+0x10>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	371c      	adds	r7, #28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000
 8000d34:	48000400 	.word	0x48000400
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	48000c00 	.word	0x48000c00
 8000d40:	40010400 	.word	0x40010400

08000d44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e081      	b.n	8000e5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d106      	bne.n	8000d70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fb86 	bl	800047c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2224      	movs	r2, #36	; 0x24
 8000d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000da4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d107      	bne.n	8000dbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	e006      	b.n	8000dcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d104      	bne.n	8000dde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69d9      	ldr	r1, [r3, #28]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a1a      	ldr	r2, [r3, #32]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0201 	orr.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2220      	movs	r2, #32
 8000e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b20      	cmp	r3, #32
 8000e76:	d138      	bne.n	8000eea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e032      	b.n	8000eec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2224      	movs	r2, #36	; 0x24
 8000e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6819      	ldr	r1, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 0201 	orr.w	r2, r2, #1
 8000ed4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2220      	movs	r2, #32
 8000eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000eea:	2302      	movs	r3, #2
  }
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b20      	cmp	r3, #32
 8000f0c:	d139      	bne.n	8000f82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e033      	b.n	8000f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2224      	movs	r2, #36	; 0x24
 8000f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0201 	bic.w	r2, r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0201 	orr.w	r2, r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2220      	movs	r2, #32
 8000f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000f82:	2302      	movs	r3, #2
  }
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f001 b823 	b.w	8001ffc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 817d 	beq.w	80012c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fcc:	4bbc      	ldr	r3, [pc, #752]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d00c      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fd8:	4bb9      	ldr	r3, [pc, #740]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d15c      	bne.n	800109e <HAL_RCC_OscConfig+0x10e>
 8000fe4:	4bb6      	ldr	r3, [pc, #728]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff0:	d155      	bne.n	800109e <HAL_RCC_OscConfig+0x10e>
 8000ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001006:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	095b      	lsrs	r3, r3, #5
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d102      	bne.n	8001024 <HAL_RCC_OscConfig+0x94>
 800101e:	4ba8      	ldr	r3, [pc, #672]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	e015      	b.n	8001050 <HAL_RCC_OscConfig+0xc0>
 8001024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001028:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001040:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800104c:	4b9c      	ldr	r3, [pc, #624]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001054:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001058:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800105c:	fa92 f2a2 	rbit	r2, r2
 8001060:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001064:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001068:	fab2 f282 	clz	r2, r2
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	f042 0220 	orr.w	r2, r2, #32
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	f002 021f 	and.w	r2, r2, #31
 8001078:	2101      	movs	r1, #1
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 811f 	beq.w	80012c4 <HAL_RCC_OscConfig+0x334>
 8001086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800108a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f040 8116 	bne.w	80012c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	f000 bfaf 	b.w	8001ffc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ae:	d106      	bne.n	80010be <HAL_RCC_OscConfig+0x12e>
 80010b0:	4b83      	ldr	r3, [pc, #524]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a82      	ldr	r2, [pc, #520]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 80010b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e036      	b.n	800112c <HAL_RCC_OscConfig+0x19c>
 80010be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x158>
 80010ce:	4b7c      	ldr	r3, [pc, #496]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a7b      	ldr	r2, [pc, #492]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 80010d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b79      	ldr	r3, [pc, #484]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a78      	ldr	r2, [pc, #480]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e021      	b.n	800112c <HAL_RCC_OscConfig+0x19c>
 80010e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x184>
 80010fa:	4b71      	ldr	r3, [pc, #452]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a70      	ldr	r2, [pc, #448]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b6e      	ldr	r3, [pc, #440]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a6d      	ldr	r2, [pc, #436]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0x19c>
 8001114:	4b6a      	ldr	r3, [pc, #424]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a69      	ldr	r2, [pc, #420]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b67      	ldr	r3, [pc, #412]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a66      	ldr	r2, [pc, #408]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800112c:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 800112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001130:	f023 020f 	bic.w	r2, r3, #15
 8001134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	495f      	ldr	r1, [pc, #380]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8001142:	4313      	orrs	r3, r2
 8001144:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800114a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d059      	beq.n	800120a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fa95 	bl	8000684 <HAL_GetTick>
 800115a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	e00a      	b.n	8001176 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fa90 	bl	8000684 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b64      	cmp	r3, #100	; 0x64
 800116e:	d902      	bls.n	8001176 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	f000 bf43 	b.w	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001176:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800118a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	095b      	lsrs	r3, r3, #5
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d102      	bne.n	80011a8 <HAL_RCC_OscConfig+0x218>
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	e015      	b.n	80011d4 <HAL_RCC_OscConfig+0x244>
 80011a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80011d0:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80011dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011e0:	fa92 f2a2 	rbit	r2, r2
 80011e4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80011e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80011ec:	fab2 f282 	clz	r2, r2
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f042 0220 	orr.w	r2, r2, #32
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0ab      	beq.n	8001160 <HAL_RCC_OscConfig+0x1d0>
 8001208:	e05d      	b.n	80012c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fa3b 	bl	8000684 <HAL_GetTick>
 800120e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	e00a      	b.n	800122a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fa36 	bl	8000684 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b64      	cmp	r3, #100	; 0x64
 8001222:	d902      	bls.n	800122a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	f000 bee9 	b.w	8001ffc <HAL_RCC_OscConfig+0x106c>
 800122a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800122e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800123e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	fab3 f383 	clz	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d102      	bne.n	800125c <HAL_RCC_OscConfig+0x2cc>
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	e015      	b.n	8001288 <HAL_RCC_OscConfig+0x2f8>
 800125c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001260:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001264:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001268:	fa93 f3a3 	rbit	r3, r3
 800126c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001274:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001278:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800128c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001290:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001294:	fa92 f2a2 	rbit	r2, r2
 8001298:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800129c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	f042 0220 	orr.w	r2, r2, #32
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	f002 021f 	and.w	r2, r2, #31
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1ab      	bne.n	8001214 <HAL_RCC_OscConfig+0x284>
 80012bc:	e003      	b.n	80012c6 <HAL_RCC_OscConfig+0x336>
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 817d 	beq.w	80015d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012dc:	4ba6      	ldr	r3, [pc, #664]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012e8:	4ba3      	ldr	r3, [pc, #652]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d172      	bne.n	80013da <HAL_RCC_OscConfig+0x44a>
 80012f4:	4ba0      	ldr	r3, [pc, #640]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d16c      	bne.n	80013da <HAL_RCC_OscConfig+0x44a>
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001312:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	095b      	lsrs	r3, r3, #5
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d102      	bne.n	8001330 <HAL_RCC_OscConfig+0x3a0>
 800132a:	4b93      	ldr	r3, [pc, #588]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	e013      	b.n	8001358 <HAL_RCC_OscConfig+0x3c8>
 8001330:	2302      	movs	r3, #2
 8001332:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001348:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001354:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	2202      	movs	r2, #2
 800135a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800135e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001362:	fa92 f2a2 	rbit	r2, r2
 8001366:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800136a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800136e:	fab2 f282 	clz	r2, r2
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	f042 0220 	orr.w	r2, r2, #32
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f002 021f 	and.w	r2, r2, #31
 800137e:	2101      	movs	r1, #1
 8001380:	fa01 f202 	lsl.w	r2, r1, r2
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00a      	beq.n	80013a0 <HAL_RCC_OscConfig+0x410>
 800138a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800138e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d002      	beq.n	80013a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	f000 be2e 	b.w	8001ffc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b75      	ldr	r3, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	21f8      	movs	r1, #248	; 0xf8
 80013b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80013be:	fa91 f1a1 	rbit	r1, r1
 80013c2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80013c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80013ca:	fab1 f181 	clz	r1, r1
 80013ce:	b2c9      	uxtb	r1, r1
 80013d0:	408b      	lsls	r3, r1
 80013d2:	4969      	ldr	r1, [pc, #420]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d8:	e0fd      	b.n	80015d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8088 	beq.w	80014fc <HAL_RCC_OscConfig+0x56c>
 80013ec:	2301      	movs	r3, #1
 80013ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80013fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001402:	fab3 f383 	clz	r3, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800140c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	461a      	mov	r2, r3
 8001414:	2301      	movs	r3, #1
 8001416:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff f934 	bl	8000684 <HAL_GetTick>
 800141c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff f92f 	bl	8000684 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d902      	bls.n	8001438 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	f000 bde2 	b.w	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001438:	2302      	movs	r3, #2
 800143a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001442:	fa93 f3a3 	rbit	r3, r3
 8001446:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800144a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	095b      	lsrs	r3, r3, #5
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d102      	bne.n	8001468 <HAL_RCC_OscConfig+0x4d8>
 8001462:	4b45      	ldr	r3, [pc, #276]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	e013      	b.n	8001490 <HAL_RCC_OscConfig+0x500>
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001480:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	2202      	movs	r2, #2
 8001492:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001496:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800149a:	fa92 f2a2 	rbit	r2, r2
 800149e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014a6:	fab2 f282 	clz	r2, r2
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	f042 0220 	orr.w	r2, r2, #32
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	f002 021f 	and.w	r2, r2, #31
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f202 	lsl.w	r2, r1, r2
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0af      	beq.n	8001422 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	21f8      	movs	r1, #248	; 0xf8
 80014d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014e0:	fa91 f1a1 	rbit	r1, r1
 80014e4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80014e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80014ec:	fab1 f181 	clz	r1, r1
 80014f0:	b2c9      	uxtb	r1, r1
 80014f2:	408b      	lsls	r3, r1
 80014f4:	4920      	ldr	r1, [pc, #128]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
 80014fa:	e06c      	b.n	80015d6 <HAL_RCC_OscConfig+0x646>
 80014fc:	2301      	movs	r3, #1
 80014fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800150e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001512:	fab3 f383 	clz	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800151c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	461a      	mov	r2, r3
 8001524:	2300      	movs	r3, #0
 8001526:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff f8ac 	bl	8000684 <HAL_GetTick>
 800152c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff f8a7 	bl	8000684 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d902      	bls.n	8001548 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	f000 bd5a 	b.w	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800155a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d104      	bne.n	800157c <HAL_RCC_OscConfig+0x5ec>
 8001572:	4b01      	ldr	r3, [pc, #4]	; (8001578 <HAL_RCC_OscConfig+0x5e8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	e015      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
 8001578:	40021000 	.word	0x40021000
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001594:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015a0:	4bc8      	ldr	r3, [pc, #800]	; (80018c4 <HAL_RCC_OscConfig+0x934>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	2202      	movs	r2, #2
 80015a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015ae:	fa92 f2a2 	rbit	r2, r2
 80015b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015ba:	fab2 f282 	clz	r2, r2
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	f042 0220 	orr.w	r2, r2, #32
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f002 021f 	and.w	r2, r2, #31
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f202 	lsl.w	r2, r1, r2
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ad      	bne.n	8001532 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8110 	beq.w	800180c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d079      	beq.n	80016f0 <HAL_RCC_OscConfig+0x760>
 80015fc:	2301      	movs	r3, #1
 80015fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800160e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	fab3 f383 	clz	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	4bab      	ldr	r3, [pc, #684]	; (80018c8 <HAL_RCC_OscConfig+0x938>)
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	461a      	mov	r2, r3
 8001622:	2301      	movs	r3, #1
 8001624:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff f82d 	bl	8000684 <HAL_GetTick>
 800162a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff f828 	bl	8000684 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d902      	bls.n	8001646 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	f000 bcdb 	b.w	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001650:	fa93 f3a3 	rbit	r3, r3
 8001654:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001660:	2202      	movs	r2, #2
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001668:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fa93 f2a3 	rbit	r2, r3
 8001672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001684:	2202      	movs	r2, #2
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fa93 f2a3 	rbit	r2, r3
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800169e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a0:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x934>)
 80016a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016ac:	2102      	movs	r1, #2
 80016ae:	6019      	str	r1, [r3, #0]
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	fa93 f1a3 	rbit	r1, r3
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016c6:	6019      	str	r1, [r3, #0]
  return result;
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0a0      	beq.n	8001630 <HAL_RCC_OscConfig+0x6a0>
 80016ee:	e08d      	b.n	800180c <HAL_RCC_OscConfig+0x87c>
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fa93 f2a3 	rbit	r2, r3
 800170a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001712:	601a      	str	r2, [r3, #0]
  return result;
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800171c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	fab3 f383 	clz	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x938>)
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	461a      	mov	r2, r3
 800172e:	2300      	movs	r3, #0
 8001730:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7fe ffa7 	bl	8000684 <HAL_GetTick>
 8001736:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173a:	e00a      	b.n	8001752 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173c:	f7fe ffa2 	bl	8000684 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d902      	bls.n	8001752 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	f000 bc55 	b.w	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800175a:	2202      	movs	r2, #2
 800175c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800177e:	2202      	movs	r2, #2
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017a2:	2202      	movs	r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	fa93 f2a3 	rbit	r2, r3
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_OscConfig+0x934>)
 80017c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017ca:	2102      	movs	r1, #2
 80017cc:	6019      	str	r1, [r3, #0]
 80017ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fa93 f1a3 	rbit	r1, r3
 80017dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017e4:	6019      	str	r1, [r3, #0]
  return result;
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d197      	bne.n	800173c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 81a1 	beq.w	8001b64 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <HAL_RCC_OscConfig+0x934>)
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d116      	bne.n	8001862 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_RCC_OscConfig+0x934>)
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	4a22      	ldr	r2, [pc, #136]	; (80018c4 <HAL_RCC_OscConfig+0x934>)
 800183a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183e:	61d3      	str	r3, [r2, #28]
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_RCC_OscConfig+0x934>)
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001856:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800185a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800185c:	2301      	movs	r3, #1
 800185e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_RCC_OscConfig+0x93c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d11a      	bne.n	80018a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_RCC_OscConfig+0x93c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a16      	ldr	r2, [pc, #88]	; (80018cc <HAL_RCC_OscConfig+0x93c>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7fe ff03 	bl	8000684 <HAL_GetTick>
 800187e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	e009      	b.n	8001898 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001884:	f7fe fefe 	bl	8000684 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	; 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e3b1      	b.n	8001ffc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_OscConfig+0x93c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ef      	beq.n	8001884 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d10d      	bne.n	80018d0 <HAL_RCC_OscConfig+0x940>
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_RCC_OscConfig+0x934>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4a02      	ldr	r2, [pc, #8]	; (80018c4 <HAL_RCC_OscConfig+0x934>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6213      	str	r3, [r2, #32]
 80018c0:	e03c      	b.n	800193c <HAL_RCC_OscConfig+0x9ac>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	10908120 	.word	0x10908120
 80018cc:	40007000 	.word	0x40007000
 80018d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10c      	bne.n	80018fa <HAL_RCC_OscConfig+0x96a>
 80018e0:	4bc1      	ldr	r3, [pc, #772]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4ac0      	ldr	r2, [pc, #768]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	4bbe      	ldr	r3, [pc, #760]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4abd      	ldr	r2, [pc, #756]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	e020      	b.n	800193c <HAL_RCC_OscConfig+0x9ac>
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x994>
 800190a:	4bb7      	ldr	r3, [pc, #732]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4ab6      	ldr	r2, [pc, #728]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	4bb4      	ldr	r3, [pc, #720]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4ab3      	ldr	r2, [pc, #716]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x9ac>
 8001924:	4bb0      	ldr	r3, [pc, #704]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4aaf      	ldr	r2, [pc, #700]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	4bad      	ldr	r3, [pc, #692]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4aac      	ldr	r2, [pc, #688]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001936:	f023 0304 	bic.w	r3, r3, #4
 800193a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 8081 	beq.w	8001a50 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7fe fe99 	bl	8000684 <HAL_GetTick>
 8001952:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7fe fe94 	bl	8000684 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	; 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e345      	b.n	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001978:	2202      	movs	r2, #2
 800197a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001980:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f2a3 	rbit	r2, r3
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001998:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800199c:	2202      	movs	r2, #2
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019b6:	601a      	str	r2, [r3, #0]
  return result;
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80019c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d102      	bne.n	80019dc <HAL_RCC_OscConfig+0xa4c>
 80019d6:	4b84      	ldr	r3, [pc, #528]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	e013      	b.n	8001a04 <HAL_RCC_OscConfig+0xa74>
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019e4:	2202      	movs	r2, #2
 80019e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	4b79      	ldr	r3, [pc, #484]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a08:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	6011      	str	r1, [r2, #0]
 8001a10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a14:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	fa92 f1a2 	rbit	r1, r2
 8001a1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a26:	6011      	str	r1, [r2, #0]
  return result;
 8001a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f002 021f 	and.w	r2, r2, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d084      	beq.n	8001958 <HAL_RCC_OscConfig+0x9c8>
 8001a4e:	e07f      	b.n	8001b50 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7fe fe18 	bl	8000684 <HAL_GetTick>
 8001a54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	e00b      	b.n	8001a72 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5a:	f7fe fe13 	bl	8000684 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e2c4      	b.n	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ab8:	601a      	str	r2, [r3, #0]
  return result;
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ac2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_OscConfig+0xb4e>
 8001ad8:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	e013      	b.n	8001b06 <HAL_RCC_OscConfig+0xb76>
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fa93 f2a3 	rbit	r2, r3
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b0a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b0e:	2102      	movs	r1, #2
 8001b10:	6011      	str	r1, [r2, #0]
 8001b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b16:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	fa92 f1a2 	rbit	r1, r2
 8001b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b24:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b28:	6011      	str	r1, [r2, #0]
  return result;
 8001b2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b2e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	fab2 f282 	clz	r2, r2
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	f002 021f 	and.w	r2, r2, #31
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d184      	bne.n	8001a5a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b50:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8242 	beq.w	8001ffa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <HAL_RCC_OscConfig+0xc58>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	f000 8213 	beq.w	8001faa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	f040 8162 	bne.w	8001e5a <HAL_RCC_OscConfig+0xeca>
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	fa93 f2a3 	rbit	r2, r3
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bba:	601a      	str	r2, [r3, #0]
  return result;
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001bc4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2300      	movs	r3, #0
 8001bda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7fe fd52 	bl	8000684 <HAL_GetTick>
 8001be0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	e00c      	b.n	8001c00 <HAL_RCC_OscConfig+0xc70>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7fe fd4a 	bl	8000684 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e1fd      	b.n	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	fa93 f2a3 	rbit	r2, r3
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c24:	601a      	str	r2, [r3, #0]
  return result;
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001c2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d102      	bne.n	8001c4a <HAL_RCC_OscConfig+0xcba>
 8001c44:	4bb0      	ldr	r3, [pc, #704]	; (8001f08 <HAL_RCC_OscConfig+0xf78>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	e027      	b.n	8001c9a <HAL_RCC_OscConfig+0xd0a>
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	4b9c      	ldr	r3, [pc, #624]	; (8001f08 <HAL_RCC_OscConfig+0xf78>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c9e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ca2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca6:	6011      	str	r1, [r2, #0]
 8001ca8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	fa92 f1a2 	rbit	r1, r2
 8001cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cbe:	6011      	str	r1, [r2, #0]
  return result;
 8001cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	fab2 f282 	clz	r2, r2
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f042 0220 	orr.w	r2, r2, #32
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f002 021f 	and.w	r2, r2, #31
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d182      	bne.n	8001bec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce6:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <HAL_RCC_OscConfig+0xf78>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	430b      	orrs	r3, r1
 8001d08:	497f      	ldr	r1, [pc, #508]	; (8001f08 <HAL_RCC_OscConfig+0xf78>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d20:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	fa93 f2a3 	rbit	r2, r3
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d32:	601a      	str	r2, [r3, #0]
  return result;
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d3c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2301      	movs	r3, #1
 8001d52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7fe fc96 	bl	8000684 <HAL_GetTick>
 8001d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d5c:	e009      	b.n	8001d72 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7fe fc91 	bl	8000684 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e144      	b.n	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	fa93 f2a3 	rbit	r2, r3
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001d96:	601a      	str	r2, [r3, #0]
  return result;
 8001d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001da0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	095b      	lsrs	r3, r3, #5
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d102      	bne.n	8001dbc <HAL_RCC_OscConfig+0xe2c>
 8001db6:	4b54      	ldr	r3, [pc, #336]	; (8001f08 <HAL_RCC_OscConfig+0xf78>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	e027      	b.n	8001e0c <HAL_RCC_OscConfig+0xe7c>
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ddc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	4b3f      	ldr	r3, [pc, #252]	; (8001f08 <HAL_RCC_OscConfig+0xf78>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e10:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e18:	6011      	str	r1, [r2, #0]
 8001e1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e1e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	fa92 f1a2 	rbit	r1, r2
 8001e28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e2c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e30:	6011      	str	r1, [r2, #0]
  return result;
 8001e32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e36:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d082      	beq.n	8001d5e <HAL_RCC_OscConfig+0xdce>
 8001e58:	e0cf      	b.n	8001ffa <HAL_RCC_OscConfig+0x106a>
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e7e:	601a      	str	r2, [r3, #0]
  return result;
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001e88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fbf0 	bl	8000684 <HAL_GetTick>
 8001ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea8:	e009      	b.n	8001ebe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe fbeb 	bl	8000684 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e09e      	b.n	8001ffc <HAL_RCC_OscConfig+0x106c>
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ec6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ee2:	601a      	str	r2, [r3, #0]
  return result;
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001eec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d104      	bne.n	8001f0c <HAL_RCC_OscConfig+0xf7c>
 8001f02:	4b01      	ldr	r3, [pc, #4]	; (8001f08 <HAL_RCC_OscConfig+0xf78>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e029      	b.n	8001f5c <HAL_RCC_OscConfig+0xfcc>
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f44:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	fa93 f2a3 	rbit	r2, r3
 8001f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_RCC_OscConfig+0x1078>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f60:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f68:	6011      	str	r1, [r2, #0]
 8001f6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f6e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	fa92 f1a2 	rbit	r1, r2
 8001f78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f80:	6011      	str	r1, [r2, #0]
  return result;
 8001f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	fab2 f282 	clz	r2, r2
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f042 0220 	orr.w	r2, r2, #32
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	f002 021f 	and.w	r2, r2, #31
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d180      	bne.n	8001eaa <HAL_RCC_OscConfig+0xf1a>
 8001fa8:	e027      	b.n	8001ffa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e01e      	b.n	8001ffc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_OscConfig+0x1078>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001fde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001fe2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000

0800200c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b09e      	sub	sp, #120	; 0x78
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e162      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b90      	ldr	r3, [pc, #576]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d910      	bls.n	8002054 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b8d      	ldr	r3, [pc, #564]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	498b      	ldr	r1, [pc, #556]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b89      	ldr	r3, [pc, #548]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e14a      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002060:	4b82      	ldr	r3, [pc, #520]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	497f      	ldr	r1, [pc, #508]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 80dc 	beq.w	8002238 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d13c      	bne.n	8002102 <HAL_RCC_ClockConfig+0xf6>
 8002088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d102      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xa6>
 80020ac:	4b6f      	ldr	r3, [pc, #444]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	e00f      	b.n	80020d2 <HAL_RCC_ClockConfig+0xc6>
 80020b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	667b      	str	r3, [r7, #100]	; 0x64
 80020c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c4:	663b      	str	r3, [r7, #96]	; 0x60
 80020c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020ce:	4b67      	ldr	r3, [pc, #412]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80020d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020da:	fa92 f2a2 	rbit	r2, r2
 80020de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80020e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d17b      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0f3      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d13c      	bne.n	8002184 <HAL_RCC_ClockConfig+0x178>
 800210a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d102      	bne.n	8002134 <HAL_RCC_ClockConfig+0x128>
 800212e:	4b4f      	ldr	r3, [pc, #316]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e00f      	b.n	8002154 <HAL_RCC_ClockConfig+0x148>
 8002134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002138:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
 8002142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
 8002148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214a:	fa93 f3a3 	rbit	r3, r3
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002158:	63ba      	str	r2, [r7, #56]	; 0x38
 800215a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800215c:	fa92 f2a2 	rbit	r2, r2
 8002160:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002164:	fab2 f282 	clz	r2, r2
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	f042 0220 	orr.w	r2, r2, #32
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f002 021f 	and.w	r2, r2, #31
 8002174:	2101      	movs	r1, #1
 8002176:	fa01 f202 	lsl.w	r2, r1, r2
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d13a      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b2      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
 80021a6:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	e00d      	b.n	80021c8 <HAL_RCC_ClockConfig+0x1bc>
 80021ac:	2302      	movs	r3, #2
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	2302      	movs	r3, #2
 80021ba:	623b      	str	r3, [r7, #32]
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	2202      	movs	r2, #2
 80021ca:	61ba      	str	r2, [r7, #24]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	fa92 f2a2 	rbit	r2, r2
 80021d2:	617a      	str	r2, [r7, #20]
  return result;
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	fab2 f282 	clz	r2, r2
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f042 0220 	orr.w	r2, r2, #32
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f002 021f 	and.w	r2, r2, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e079      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	491a      	ldr	r1, [pc, #104]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7fe fa3c 	bl	8000684 <HAL_GetTick>
 800220c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7fe fa38 	bl	8000684 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e061      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_ClockConfig+0x260>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 020c 	and.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d214      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0207 	bic.w	r2, r3, #7
 800224e:	4906      	ldr	r1, [pc, #24]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <HAL_RCC_ClockConfig+0x25c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e040      	b.n	80022ea <HAL_RCC_ClockConfig+0x2de>
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	491a      	ldr	r1, [pc, #104]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4912      	ldr	r1, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022ae:	f000 f829 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022b2:	4601      	mov	r1, r0
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <HAL_RCC_ClockConfig+0x2e8>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022bc:	22f0      	movs	r2, #240	; 0xf0
 80022be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	60fa      	str	r2, [r7, #12]
  return result;
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	fab2 f282 	clz	r2, r2
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	40d3      	lsrs	r3, r2
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x2ec>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	fa21 f303 	lsr.w	r3, r1, r3
 80022da:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_RCC_ClockConfig+0x2f0>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_RCC_ClockConfig+0x2f4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f98a 	bl	80005fc <HAL_InitTick>
  
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3778      	adds	r7, #120	; 0x78
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08002694 	.word	0x08002694
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b08b      	sub	sp, #44	; 0x2c
 8002308:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d002      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x30>
 800232e:	2b08      	cmp	r3, #8
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x36>
 8002332:	e03c      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002336:	623b      	str	r3, [r7, #32]
      break;
 8002338:	e03c      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002340:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002344:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fa92 f2a2 	rbit	r2, r2
 800234c:	607a      	str	r2, [r7, #4]
  return result;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	fab2 f282 	clz	r2, r2
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	40d3      	lsrs	r3, r2
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	220f      	movs	r2, #15
 8002368:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	fa92 f2a2 	rbit	r2, r2
 8002370:	60fa      	str	r2, [r7, #12]
  return result;
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	fab2 f282 	clz	r2, r2
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	40d3      	lsrs	r3, r2
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800238c:	4a0e      	ldr	r2, [pc, #56]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	fbb2 f2f3 	udiv	r2, r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
 800239c:	e004      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	623b      	str	r3, [r7, #32]
      break;
 80023ac:	e002      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023b0:	623b      	str	r3, [r7, #32]
      break;
 80023b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b4:	6a3b      	ldr	r3, [r7, #32]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	372c      	adds	r7, #44	; 0x2c
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	007a1200 	.word	0x007a1200
 80023cc:	080026a4 	.word	0x080026a4
 80023d0:	080026b4 	.word	0x080026b4
 80023d4:	003d0900 	.word	0x003d0900

080023d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b092      	sub	sp, #72	; 0x48
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80cd 	beq.w	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fc:	4b86      	ldr	r3, [pc, #536]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10e      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002408:	4b83      	ldr	r3, [pc, #524]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	4a82      	ldr	r2, [pc, #520]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800240e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002412:	61d3      	str	r3, [r2, #28]
 8002414:	4b80      	ldr	r3, [pc, #512]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b7d      	ldr	r3, [pc, #500]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002432:	4b7a      	ldr	r3, [pc, #488]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a79      	ldr	r2, [pc, #484]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7fe f921 	bl	8000684 <HAL_GetTick>
 8002442:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7fe f91d 	bl	8000684 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b64      	cmp	r3, #100	; 0x64
 8002452:	d901      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0db      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b70      	ldr	r3, [pc, #448]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002464:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d07d      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800247e:	429a      	cmp	r2, r3
 8002480:	d076      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002482:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	461a      	mov	r2, r3
 80024ac:	2301      	movs	r3, #1
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b55      	ldr	r3, [pc, #340]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	461a      	mov	r2, r3
 80024d0:	2300      	movs	r3, #0
 80024d2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024d4:	4a50      	ldr	r2, [pc, #320]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d045      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7fe f8ce 	bl	8000684 <HAL_GetTick>
 80024e8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7fe f8ca 	bl	8000684 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e086      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002502:	2302      	movs	r3, #2
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	2302      	movs	r3, #2
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	61fb      	str	r3, [r7, #28]
  return result;
 800251a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d102      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	e007      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	4b35      	ldr	r3, [pc, #212]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2202      	movs	r2, #2
 8002548:	613a      	str	r2, [r7, #16]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	fa92 f2a2 	rbit	r2, r2
 8002550:	60fa      	str	r2, [r7, #12]
  return result;
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	fab2 f282 	clz	r2, r2
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	f002 021f 	and.w	r2, r2, #31
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0bd      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4926      	ldr	r1, [pc, #152]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800257e:	4313      	orrs	r3, r2
 8002580:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002582:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4a22      	ldr	r2, [pc, #136]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	491a      	ldr	r1, [pc, #104]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f023 0210 	bic.w	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4912      	ldr	r1, [pc, #72]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	490b      	ldr	r1, [pc, #44]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800260a:	4313      	orrs	r3, r2
 800260c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3748      	adds	r7, #72	; 0x48
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
 8002620:	10908100 	.word	0x10908100

08002624 <memset>:
 8002624:	4402      	add	r2, r0
 8002626:	4603      	mov	r3, r0
 8002628:	4293      	cmp	r3, r2
 800262a:	d100      	bne.n	800262e <memset+0xa>
 800262c:	4770      	bx	lr
 800262e:	f803 1b01 	strb.w	r1, [r3], #1
 8002632:	e7f9      	b.n	8002628 <memset+0x4>

08002634 <__libc_init_array>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	4d0d      	ldr	r5, [pc, #52]	; (800266c <__libc_init_array+0x38>)
 8002638:	4c0d      	ldr	r4, [pc, #52]	; (8002670 <__libc_init_array+0x3c>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	2600      	movs	r6, #0
 8002640:	42a6      	cmp	r6, r4
 8002642:	d109      	bne.n	8002658 <__libc_init_array+0x24>
 8002644:	4d0b      	ldr	r5, [pc, #44]	; (8002674 <__libc_init_array+0x40>)
 8002646:	4c0c      	ldr	r4, [pc, #48]	; (8002678 <__libc_init_array+0x44>)
 8002648:	f000 f818 	bl	800267c <_init>
 800264c:	1b64      	subs	r4, r4, r5
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	2600      	movs	r6, #0
 8002652:	42a6      	cmp	r6, r4
 8002654:	d105      	bne.n	8002662 <__libc_init_array+0x2e>
 8002656:	bd70      	pop	{r4, r5, r6, pc}
 8002658:	f855 3b04 	ldr.w	r3, [r5], #4
 800265c:	4798      	blx	r3
 800265e:	3601      	adds	r6, #1
 8002660:	e7ee      	b.n	8002640 <__libc_init_array+0xc>
 8002662:	f855 3b04 	ldr.w	r3, [r5], #4
 8002666:	4798      	blx	r3
 8002668:	3601      	adds	r6, #1
 800266a:	e7f2      	b.n	8002652 <__libc_init_array+0x1e>
 800266c:	080026c4 	.word	0x080026c4
 8002670:	080026c4 	.word	0x080026c4
 8002674:	080026c4 	.word	0x080026c4
 8002678:	080026c8 	.word	0x080026c8

0800267c <_init>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr

08002688 <_fini>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr
